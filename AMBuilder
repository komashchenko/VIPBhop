# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python: 
import os

# Here only one sdk should be available to generate only one executable in the end,
# as multi-sdk loading isn't supported out of the box by metamod, and would require specifying the full path in the vdf
# which in the end would ruin the multi-platform (unix, win etc) loading by metamod as it won't be able to append platform specific extension
# so just fall back to the single binary.
# Multi-sdk solutions should be manually loaded with a custom plugin loader (examples being sourcemod, stripper:source)
for sdk_target in MMSPlugin.sdk_targets:
  sdk = sdk_target.sdk
  cxx = sdk_target.cxx

  binary = MMSPlugin.HL2Library(builder, cxx, MMSPlugin.plugin_name, sdk)

  binary.sources += [
    'vip_bhop.cpp'
  ]

  binary.sources += [
    os.path.join('sdk', 'schemasystem_helper.cpp'),
    os.path.join('third_party', 'dynlibutils', 'module.cpp'),
    os.path.join('third_party', 'subhook', 'subhook.c')
  ]

  binary.compiler.cxxincludes += [
    os.path.join(builder.sourcePath, 'sdk'),
    os.path.join(builder.sourcePath, 'third_party', 'dynlibutils'),
    os.path.join(builder.sourcePath, 'third_party', 'subhook'),
    os.path.join(builder.sourcePath, 'third_party', 'cs2-vip', 'include'),
  ]

  binary.compiler.defines += [
    'SUBHOOK_STATIC'
  ]

  binary.custom = [builder.tools.Protoc(protoc = sdk_target.protoc, sources = [
    os.path.join(sdk['path'], 'common', 'network_connection.proto'),
    os.path.join(sdk['path'], 'common', 'networkbasetypes.proto'),
  ])]

  # Export only CreateInterface
  if binary.compiler.target.platform == 'linux':
    binary.compiler.linkflags += ['-Wl,--version-script=' + os.path.join(builder.currentSourcePath, 'ExportMap')]

  nodes = builder.Add(binary)
  MMSPlugin.binaries += [nodes]
